@inject IPasswordManagerAccountRepository<PasswordAccountModel> passwordManagerAccountRepository
@inject IJSRuntime jsRuntime


<div class="container-fluid mt-5">
    <RadzenCard>
        <div class="row px-3">
            <div class="col-md-3 p-3">
            </div>
            <div class="col-md-3 p-3">
                <RadzenButton Text="Export CSV" Icon="grid_on" Click="@Export" class="mb-4" />
            </div>
            <div class="col-md-3 p-3">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Import passwords</RadzenText>
                <RadzenUpload 
                    @ref="upload" 
                    Auto="false" 
                    Multiple="false" 
                    Url=@($"Home/UploadCSV?userId={UserId}")
                    Change=@(args => OnChange(args, "Manual Upload"))
                    Progress=@(args => OnProgress(args, "Manual Upload")) 
                    Complete="@(args => OnComplete(args))"
                    Error="@(args => OnError(args))"
                    class="w-100" 
                    ChooseText="Select File" />
                
                @if (upload is not null && upload.HasValue)
                {
                    <RadzenButton Text="Upload" Click=@(args => UploadDocument(args)) class="d-block mt-4" />
                }
                <div>
                    <span class="mt-3" style="font-weight:bold;">Click on the link to get the CSV file format sample: <a href="templates/example.csv">Example File</a></span>
                </div>
            </div>
            <div class="col-md-3 p-3">
            </div>
        </div>
    </RadzenCard>
</div>


@code {

    private IEnumerable<PasswordAccountModel> PasswordAccountModels {get;set;}

    [Parameter]
    public string UserId {get;set;}

    protected override async Task OnInitializedAsync()
    {
        PasswordAccountModels = await passwordManagerAccountRepository.GetAllAccountsAsync(UserId);
    }

    private async void Export()
    {
        Console.WriteLine("exporting...");
        
        StringBuilder builder = new();

        builder.AppendLine("Title,Username,Password,CreatedAt,LastUpdatedAt");

        foreach (var acc in PasswordAccountModels.OrderBy(_ => _.CreatedAt))
        {
            builder.AppendLine($"{acc.Title},{acc.Username},{acc.Password.Replace(",", "+")},{acc.CreatedAt},{acc.LastUpdatedAt}");
        }

        await jsRuntime.InvokeVoidAsync("saveAsFile", "sensitive.csv", builder.ToString());
    }

    private RadzenUpload upload;

    private void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");
        }
        Console.WriteLine($"{name} changed");
    }

    private async Task OnProgress(UploadProgressArgs args, string name)
    {
        //Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");
        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }

            Console.WriteLine("upload complete");
        }
    }

    private void UploadDocument(MouseEventArgs args)
    {
        upload.Upload();
    }

    private string uploadResult {get;set;}
    private async Task OnComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine(args.RawResponse);
        //ServiceResponse? response = JsonConvert.DeserializeObject<ServiceResponse>(args.RawResponse);
//
        //if (response is not null && response.message.Contains("success"))
        //{
        //    uploadResult = "File uploaded successfully.";
        //}
        //else
        //{
        //    uploadResult = $"Error uploading file: {response?.message ?? "error"}";
        //}

    }

    private void OnError(UploadErrorEventArgs args)
    {
        uploadResult = $"Error: {args.Message}";
    }
}