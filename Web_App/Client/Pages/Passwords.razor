
@page "/passwords"
@using System.Linq.Expressions
@using static Shared.Models.ServiceResponses
@attribute [Authorize]

@*

clear nuget cache if not getting the latest version:
- dotnet nuget locals all --clear && dotnet remove package HandyBlazorComponents ; dotnet add package HandyBlazorComponents


TODO: add filters for what columns are editable
TODO: add validation checks for what columns are editable
 *@

@if (PasswordAccountLst is null)
{
    <div class="d-flex justify-content-center">
        <div id="loadingIndicator" class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <CascadingValue Name="SubmitFileAction" Value="SubmitFileAction">
        <CascadingValue Name="ExampleFileUploadUrl" Value="@("templates/example.csv")">
            <DynamicHandyGrid @ref="dynamicHandyGrid" TItem="PasswordAccountDTO" Items="PasswordAccountLst" OnCreate="OnCreate" OnUpdate="OnUpdate" OnDelete="OnDelete"
            EditModeFragments="EditModeFragments" ViewModeFragments="ViewModeFragments" />
            @* ViewModeFragments="ViewModeFragments" *@
        </CascadingValue>
    </CascadingValue>
}

<NotificationModal @ref="notificationModal" />
<ConfirmModal @ref="confirmModal" Title="Warning" BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />


@code {
    private HttpClient httpClient { get;set; }
    private int userId {get;set;}
    private DynamicHandyGrid<PasswordAccountDTO> dynamicHandyGrid = default!;
    private ConfirmModal confirmModal {get;set;}
    private NotificationModal notificationModal {get; set;}

    private List<PasswordAccountDTO> PasswordAccountLst {get;set;}

    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
        PasswordAccountLst = (await httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).Select(p => new PasswordAccountDTO {
            Title = p.Title,
            Id = p.Id,
            UserId = p.UserId,
            Username = p.Username,
            Password = p.Password,
            CreatedAt = p.CreatedAt,
            LastUpdatedAt = p.LastUpdatedAt,
        }).ToList();

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        userId = Convert.ToInt32(user.Claims.First(c=>c.Type == ClaimTypes.NameIdentifier).Value);
    }

    private async Task SubmitFileAction(MultipartFormDataContent content)
    {
        var response = await httpClient.PostAsync("/api/PasswordManager/upload-csv", content);
        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        if (!responseContent.Flag)
        {
            await notificationModal.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
        }
        else
        {
            await notificationModal.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
        }
    }

    private async Task OnCreate(List<PasswordAccountDTO> items)
    {
        //items.ForEach(i=>Console.WriteLine(i.CreatedAt.ToString()));
        //items.ForEach(i=>Console.WriteLine(i.LastUpdatedAt.ToString()));
        for (var i = 0; i < items.Count;i++)
        {
            items[i].Id = 111;
            items[i].UserId = 123;
            items[i].Title = "1234";
            items[i].Username = "1234";
            items[i].Password = "1234";
        }
        PasswordAccountLst.AddRange(items);
        PasswordAccountLst.AddRange([new PasswordAccountDTO {
            Id = 666
            ,UserId = 666
            ,Title = "1234"
            ,Username = "1234"
            ,Password = "1234"
            ,CreatedAt = DateTime.Now
            ,LastUpdatedAt = DateTime.Now
        }]);
        // TODO: apply changes here to db in real-world scenario as well
        //var response = await httpClient.PostAsJsonAsync("api/PasswordManager/add-passwords", JsonConvert.SerializeObject(items));
//
        //var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        //
        //if (!responseContent.Flag)
        //{
        //    await notificationModal.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
        //}
        //else
        //{
        //    await notificationModal.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
        //}

    }

    private async Task OnDelete(PasswordAccountDTO item)
    {
        var confirm = await confirmModal.ShowAsync();
        if (confirm)
        {
            PasswordAccountLst = PasswordAccountLst.Where(o=>o.Id != item.Id).ToList();
            // TODO: apply changes here to db in real-world scenario as well
            //var response = await httpClient.DeleteAsync($"api/PasswordManager/deletePassword/{item.Id}");
            //var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            //if (!responseContent.Flag)
            //{
            //    await notificationModal.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
            //}
            //else
            //{
            //    await notificationModal.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
            //}
        }
    }

    private async Task OnUpdate(PasswordAccountDTO item)
    {
        for (int i = 0; i < PasswordAccountLst.Count; i++)
        {
            if (PasswordAccountLst[i].Id == item.Id)
            {
                PasswordAccountLst[i].Title = item.Title;
                PasswordAccountLst[i].Username = item.Username;
                PasswordAccountLst[i].Password = item.Password;
                PasswordAccountLst[i].CreatedAt = DateTime.Now;
                PasswordAccountLst[i].LastUpdatedAt = DateTime.Now;

                // TODO: apply changes here to db in real-world scenario as well

                //var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", PasswordAccountLst[i]);
                //var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
                //if (!responseContent.Flag)
                //{
                //    await notificationModal.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
                //}
                //else
                //{
                //    await notificationModal.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
                //}
                
            }
        }
    }

    private Dictionary<string, RenderFragment<PasswordAccountDTO>> EditModeFragments => new()
    {
        {
            "Password",
            o => @<ObscureInput TItem="PasswordAccountDTO" ColumnName="Password" Item="o" Style="width: 12rem;"/>
        },
        {
            "CreatedAt",
            o => @<input @bind="@(o.CreatedAt)" type="datetime-local" />
        },
        {
            "LastUpdatedAt",
            o => @<input @bind="@(o.LastUpdatedAt)" type="datetime-local" />
        },
    };

    private Dictionary<string, RenderFragment<PasswordAccountDTO>> ViewModeFragments => new()
    {
        {
            "Password",
            o => @<span>@(new string('*', o.Password.Length))</span>
        },
    };
}

   
