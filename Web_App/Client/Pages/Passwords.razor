
@page "/passwords"
@using System.Linq.Expressions
@using static Shared.Models.ServiceResponses
@attribute [Authorize]


@if (passwords is null)
{
    <div class="d-flex justify-content-center">
        <div id="loadingIndicator" class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="m-3">
        <button class="btn btn-primary" @onclick="TogglePasswords">Toggle Password Visibility</button>
    </div>
    <div class="m-3">
        <button class="btn btn-primary m-3" @onclick="ToggleEditing">Toggle Edit</button>
    </div>
    <div class="text-center overflow-auto m-3">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>
                        <button @onclick="@(() => SortData(PasswordColumns.Title))" class="btn btn-primary">Title @GetSortIcon(PasswordColumns.Title)</button>
                        <TextInputFilter Value="@TitleFilter" ValueChanged="@((value) => { TitleFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Title" />
                    </th>
                    <th>
                        <button @onclick="@(() => SortData(PasswordColumns.Username))" class="btn btn-primary">Username @GetSortIcon(PasswordColumns.Username)</button>
                        <TextInputFilter Value="@UsernameFilter" ValueChanged="@((value) => { UsernameFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Username" />
                    </th>
                    <th>
                        <button @onclick="@(() => SortData(PasswordColumns.Password))" class="btn btn-primary">Password @GetSortIcon(PasswordColumns.Password)</button>
                        <TextInputFilter Value="@PasswordFilter" ValueChanged="@((value) => { PasswordFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Password" />
                    </th>
                    <th>
                        <button @onclick="@(() => SortData(PasswordColumns.CreatedAt))" class="btn btn-primary">Created At @GetSortIcon(PasswordColumns.CreatedAt)</button>
                        <TextInputFilter Value="@CreatedAtFilter" ValueChanged="@((value) => { CreatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by CreatedAt" />
                    </th>
                    <th>
                        <button @onclick="@(() => SortData(PasswordColumns.LastUpdatedAt))" class="btn btn-primary">Last Updated At @GetSortIcon(PasswordColumns.LastUpdatedAt)</button>
                        <TextInputFilter Value="@LastUpdatedAtFilter" ValueChanged="@((value) => { LastUpdatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by LastUpdatedAt" />
                    </th>
                    @if (edit)
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < pagedPasswords.Count;i++)
                {
                    var cur = i;
                    <tr>
                        <td>
                            <div style="width: 2.5rem;">
                                @pagedPasswords[cur].Id
                            </div>
                        </td>
                        <td>
                            @if (editingTitleId == pagedPasswords[cur].Id && edit)
                            {
                                <div class="d-flex align-items-center p-3">
                                    <input @bind="pagedPasswords[cur].Title" class="form-control" style="width: 10rem"/>
                                    <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Title), pagedPasswords[cur].Title))" class="btn btn-secondary ms-2">
                                        Save
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center p-4">
                                    <span class="m-3">@pagedPasswords[cur].Title</span>
                                    @if (edit)
                                    {
                                        <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Title), pagedPasswords[cur].Title))" class="btn btn-secondary">
                                            Edit
                                        </button>
                                    }
                                </div>
                            }
                        </td>

                        <td>
                            @if (editingUsernameId == pagedPasswords[cur].Id && edit)
                            {
                                <div class="d-flex align-items-center p-3">
                                    <input @bind="pagedPasswords[cur].Username" class="form-control" style="width: 10rem"/>
                                    <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Username), pagedPasswords[cur].Username))" class="btn btn-secondary ms-2">
                                        Save
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center p-4">
                                    <span class="m-3">@pagedPasswords[cur].Username</span>
                                    @if (edit)
                                    {
                                        <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Username), pagedPasswords[cur].Username))" class="btn btn-secondary">
                                            Edit
                                        </button>
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            @if (editingPasswordId == pagedPasswords[cur].Id && !hidePasswords && edit)
                            {
                                <div class="d-flex align-items-center p-3">
                                    <input @bind="pagedPasswords[cur].Password" class="form-control" style="width: 10rem"/>
                                    <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Password), pagedPasswords[cur].Password))" class="btn btn-secondary ms-2">
                                        Save
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-center p-4">
                                    <span class="m-3">@pagedPasswords[cur].Password</span>
                                    @if (edit)
                                    {
                                        <button @onclick="@(() => ToggleEdit(pagedPasswords[cur].Id, nameof(PasswordAccountDTO.Password), pagedPasswords[cur].Password))" class="btn btn-secondary">
                                            Edit
                                        </button>
                                    }
                                </div>
                            }
                        </td>
                        <td>@pagedPasswords[cur].CreatedAt</td>
                        <td>@pagedPasswords[cur].LastUpdatedAt</td>
                        @if (edit)
                        {
                            <td>
                                <button @onclick="@(() => DeletePassword(pagedPasswords[cur].Id))" class="btn btn-danger">DELETE</button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <CustomPagination CurrentPage="@currentPage" TotalPages="@totalPages" OnPageChanged="@HandlePageChange" />

    <button class="btn btn-primary" @onclick="AddNewPasswords">Add New Password Accounts</button>

    <div class="m-3">
        <button class="btn btn-info" @onclick="ExportTableAsCsv">Export Table as CSV</button>
    </div>
    
    <UploadPasswordComponent />

}
<NotificationModal @ref="notificationModal" />
<NotificationModalAsync @ref="notificationModalAsync" />
<ConfirmModal @ref="confirmModal" Title="Warning" BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />

<AddPasswordsModal @ref="addPasswordsModal" UserId="userId"/>
 
@code {

    private ConfirmModal confirmModal {get;set;}
    private AddPasswordsModal addPasswordsModal {get; set;}
    private NotificationModal notificationModal {get; set;}
    private NotificationModalAsync notificationModalAsync {get; set;}
    private int? editingTitleId = null;
    private int? editingUsernameId = null;
    private int? editingPasswordId = null;


    private async Task ExportTableAsCsv()
    {
        var result = "Title,Username,Password,CreatedAt,LastUpdatedAt";
        result += '\n';
        foreach (var acc in passwords.OrderBy(p=>p.CreatedAt))
        {
            result += $"{acc.Title},{acc.Username},{acc.Password.Replace(",", "+")},{acc.CreatedAt},{acc.LastUpdatedAt}\n";
        }
        
        await jsRuntime.InvokeVoidAsync("saveAsFile", "sensitive.csv", result);
    }
    private async Task DeletePassword(int id)
    {
        var confirmation = await confirmModal.ShowAsync();
        if (confirmation)
        {
            var response = await httpClient.DeleteAsync($"api/PasswordManager/deletePassword/{id}");
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
            }
            else
            {
                await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
            }

            // refresh page
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task ToggleEdit(int id, string field, string valueToUpdate="")
    {
        var passwordAccountDTO = await httpClient.GetFromJsonAsync<PasswordAccountDTO?>($"api/PasswordManager/getPassword/{id}");
        if (passwordAccountDTO is null)
        {
            await notificationModalAsync.ShowAsync("Error", "The record was not found", ModalType.ERROR);
            return;
        }

        switch (field)
        {
            case nameof(PasswordAccountDTO.Username):
                editingUsernameId = (editingUsernameId == id) ? null : id;
                if (editingUsernameId is null) await UpdatePasswordAccount(passwordAccountDTO, nameof(PasswordAccountDTO.Username), valueToUpdate);
                break;
            case nameof(PasswordAccountDTO.Password):
                if (hidePasswords)
                {
                    await notificationModalAsync.ShowAsync(title: "Warning", message: "Please make sure you toggle passwords to show before editing.", type: ModalType.WARNING);
                    return;
                }
                editingPasswordId = (editingPasswordId == id) ? null : id;
                if (editingPasswordId is null) await UpdatePasswordAccount(passwordAccountDTO, nameof(PasswordAccountDTO.Password), valueToUpdate);
                break;
            case nameof(PasswordAccountDTO.Title):
                editingTitleId = (editingTitleId == id) ? null : id;
                if (editingTitleId is null) await UpdatePasswordAccount(passwordAccountDTO, nameof(PasswordAccountDTO.Title), valueToUpdate);
                break;
        }
    }

    private async Task UpdatePasswordAccount(PasswordAccountDTO dto, string fieldName, string valueToUpdate)
    {
        if (!string.IsNullOrEmpty(valueToUpdate))
        {
            switch (fieldName)
            {
                case nameof(PasswordAccountDTO.Title): dto.Title = valueToUpdate; break;
                case nameof(PasswordAccountDTO.Username): dto.Username = valueToUpdate; break;
                case nameof(PasswordAccountDTO.Password): dto.Password = valueToUpdate; break;
            }

            Console.WriteLine(valueToUpdate);

            var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", dto);
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
            }
            else
            {
                await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
            }

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }
//
    //private async Task ToggleEdit(int id, string field, string valueToUpdate="")
    //{
    //    if (field == nameof(PasswordAccountDTO.Username))
    //    {
    //        editingUsernameId = (editingUsernameId == id) ? null : id;
    //        if (editingUsernameId is not null)
    //        {
    //            // Console.WriteLine("editing");
    //        }
    //        else
    //        {
    //            // TODO: saving here so make api call to update
    //            Console.WriteLine(valueToUpdate);
    //            var passwordAccountDTO = await httpClient.GetFromJsonAsync<PasswordAccountDTO?>($"api/PasswordManager/getPassword/{id}");
    //            if (passwordAccountDTO is null)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", "The record was not found", ModalType.ERROR);
    //                return;
    //            }
//
    //            passwordAccountDTO.Username = valueToUpdate;
//
    //            var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", passwordAccountDTO);
    //            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
    //            if (!responseContent.Flag)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
    //            }
    //            else
    //            {
    //                await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
    //            }
//
    //            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
//
    //        }
    //    }
    //    else if (field == nameof(PasswordAccountDTO.Password))
    //    {
    //        if (hidePasswords)
    //        {
    //            notificationModal.Show(title: "Warning", message: "Please make sure you toggle passwords to show before editing.", type: ModalType.WARNING);
    //            return;
    //        }
    //        editingPasswordId = (editingPasswordId == id) ? null : id;
    //        if (editingPasswordId is not null)
    //        {
    //            // Console.WriteLine("editing");
    //        }
    //        else
    //        {
    //            // TODO: saving here so make api call to update
    //            Console.WriteLine(valueToUpdate);
    //            var passwordAccountDTO = await httpClient.GetFromJsonAsync<PasswordAccountDTO?>($"api/PasswordManager/getPassword/{id}");
    //            if (passwordAccountDTO is null)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", "The record was not found", ModalType.ERROR);
    //                return;
    //            }
//
    //            passwordAccountDTO.Password = valueToUpdate;
//
    //            var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", passwordAccountDTO);
    //            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
    //            if (!responseContent.Flag)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
    //            }
    //            else
    //            {
    //                await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
    //            }
//
    //            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    //        }
    //    }
    //    else if (field == nameof(PasswordAccountDTO.Title))
    //    {
    //        editingTitleId = (editingTitleId == id) ? null : id;
    //        if (editingTitleId is not null)
    //        {
    //            // Console.WriteLine("editing");
    //        }
    //        else
    //        {
    //            // TODO: saving here so make api call to update
    //            Console.WriteLine(valueToUpdate);
    //            var passwordAccountDTO = await httpClient.GetFromJsonAsync<PasswordAccountDTO?>($"api/PasswordManager/getPassword/{id}");
    //            if (passwordAccountDTO is null)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", "The record was not found", ModalType.ERROR);
    //                return;
    //            }
//
    //            passwordAccountDTO.Title = valueToUpdate;
//
    //            var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", passwordAccountDTO);
    //            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
    //            if (!responseContent.Flag)
    //            {
    //                await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
    //            }
    //            else
    //            {
    //                await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
    //            }
//
    //            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    //        }
    //    }
    //}
 //
    private enum PasswordColumns
    {
        Id,
        Title,
        Username,
        Password,
        CreatedAt,
        LastUpdatedAt,
    }
 
    private PasswordColumns? passwordColumns;
 
    private IEnumerable<PasswordAccountDTO> passwords {get; set;}
 
    private HttpClient httpClient { get;set; }
    private bool hidePasswords = true;
    private bool edit = false;

    private int userId {get;set;}

    private List<PasswordAccountDTO> passwordsToAdd = new();

    private async Task AddNewPasswords()
    {
        passwordsToAdd = await addPasswordsModal.ShowAsync();
        //Console.WriteLine(JsonConvert.SerializeObject(passwordsToAdd));
        if (!passwordsToAdd.Any())
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync("api/PasswordManager/add-passwords", JsonConvert.SerializeObject(passwordsToAdd));

        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        
        if (!responseContent.Flag)
        {
            await notificationModalAsync.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
        }
        else
        {
            await notificationModalAsync.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
        }

        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    
    private async Task ToggleEditing()
    {
        edit = !edit;

        // reset editingIds
        editingTitleId = null;
        editingUsernameId = null;
        editingPasswordId = null;
    }

    private async Task TogglePasswords()
    {
        hidePasswords = !hidePasswords;
        //Console.WriteLine(hidePasswords);
        if (hidePasswords)
        {
            passwords = passwords.Select(p => new PasswordAccountDTO {
                Title = p.Title,
                Id = p.Id,
                UserId = p.UserId,
                Username = p.Username,
                Password = "*****",
                CreatedAt = p.CreatedAt,
                LastUpdatedAt = p.LastUpdatedAt,
            });
        }
        else
        {
            passwords = (await httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords"));
        }
        UpdatePagedPasswords();
    }
   
    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
        passwords = (await httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).Select(p => new PasswordAccountDTO {
            Title = p.Title,
            Id = p.Id,
            UserId = p.UserId,
            Username = p.Username,
            Password = "*****",
            CreatedAt = p.CreatedAt,
            LastUpdatedAt = p.LastUpdatedAt,
        });
 
        UpdatePagedPasswords();

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        userId = Convert.ToInt32(user.Claims.First(c=>c.Type == ClaimTypes.NameIdentifier).Value);
    }
 
    private List<PasswordAccountDTO> pagedPasswords; // Paginated data
   
    // Filter properties
    private string TitleFilter {get;set;} = string.Empty;
    private string UsernameFilter {get;set;} = string.Empty;
    private string PasswordFilter {get;set;} = string.Empty;
    private string CreatedAtFilter {get;set;} = string.Empty;
    private string LastUpdatedAtFilter {get;set;} = string.Empty;
 
    private IEnumerable<PasswordAccountDTO> filteredPasswords => passwords.
        OrderBy(p => p.Id)
        .Where(p => (
                string.IsNullOrWhiteSpace(TitleFilter) &&
                string.IsNullOrWhiteSpace(UsernameFilter) &&
                string.IsNullOrWhiteSpace(PasswordFilter) &&
                string.IsNullOrWhiteSpace(CreatedAtFilter) &&
                string.IsNullOrWhiteSpace(LastUpdatedAtFilter))
                || (!string.IsNullOrWhiteSpace(TitleFilter) && p.Title.ToString().Contains(TitleFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(UsernameFilter) && p.Username.Contains(UsernameFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(PasswordFilter) && p.Password.Contains(PasswordFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(CreatedAtFilter) && p.CreatedAt.ToString() == CreatedAtFilter)
        || (!string.IsNullOrWhiteSpace(LastUpdatedAtFilter) && p.LastUpdatedAt.ToString() == LastUpdatedAtFilter)
            );
 
    private int currentPage = 1;
    private const int pageSize = 5; // Number of items per page
    private int totalPages => (int) Math.Ceiling((double) filteredPasswords.Count() / pageSize);
 
    private void FilterPasswords()
    {
        currentPage = 1;
        UpdatePagedPasswords();
    }
 
    // Handle page change event
    private void HandlePageChange(int newPage)
    {
        currentPage = newPage;
        UpdatePagedPasswords();
    }
 
    private PasswordColumns sortColumn; // The column currently being sorted
    private bool sortAscending = true; // Ascending or descending sort
 
    private void SortData(PasswordColumns columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending; // Toggle sort direction
        }
        else
        {
            sortColumn = columnName; // Set new column to sort
            sortAscending = true; // Default to ascending
        }
 
        UpdatePagedPasswords();
    }
 
    private void UpdatePagedPasswords()
    {
        pagedPasswords = filteredPasswords.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
 
        // Apply sorting
        pagedPasswords = sortAscending
            ? pagedPasswords.AsQueryable().OrderBy(GetSortExpression()).ToList()
            : pagedPasswords.AsQueryable().OrderByDescending(GetSortExpression()).ToList();
 
    }
 
    private Expression<Func<PasswordAccountDTO, object>> GetSortExpression()
    {
        // Return the appropriate expression based on the column being sorted
        return sortColumn switch
        {
            PasswordColumns.Title => p => p.Title,
            PasswordColumns.Username => p => p.Username,
            PasswordColumns.Password => p => p.Password,
            PasswordColumns.CreatedAt => p => p.CreatedAt,
            PasswordColumns.LastUpdatedAt => p => p.LastUpdatedAt,
            _ => p => p.Id // Default sort
        };
    }
 
    private string GetSortIcon(PasswordColumns columnName)
    {
        return sortColumn == columnName ? (sortAscending ? "↑" : "↓") : string.Empty; // Return an up or down arrow based on sorting
    }
}
