
@page "/passwords"
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.QuickGrid
@using static Shared.Models.ServiceResponses
@if (passwords is null || !passwords.Any())
{
    <div class="d-flex justify-content-center">
        <div id="loadingIndicator" class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="m-3">
        <button class="btn btn-primary" @onclick="TogglePasswords">Toggle Password Visibility</button>
    </div>
    <div class="m-3">
        <button class="btn btn-primary m-3" @onclick="ToggleEditing">Toggle Edit</button>
    </div>
    <div class="text-center overflow-auto m-3">
        <QuickGrid Items="@pagedPasswords" Class="table table-striped table-bordered">
            @if (edit)
            {
                <TemplateColumn Context="passwordAccount" Title="Title" Class="align-middle">
                    @if (editingTitleId == passwordAccount.Id)
                    {
                        <div class="m-3">
                            <input @bind="passwordAccount.Title" class="form-control" />
                        </div>
                    }
                    else
                    {
                        <div class="m-3">
                            <span>@passwordAccount.Title</span>
                        </div>
                    }
                    <button @onclick="@(() => ToggleEdit(passwordAccount.Id, nameof(passwordAccount.Title)))" class="btn btn-secondary">
                        @(editingTitleId == passwordAccount.Id ? "Save" : "Edit")
                    </button>
                </TemplateColumn>
                <TemplateColumn Context="passwordAccount" Title="Username" Class="align-middle">
                    @if (editingUsernameId == passwordAccount.Id)
                    {
                        <div class="m-3">
                            <input @bind="passwordAccount.Username" class="form-control" />
                        </div>
                    }
                    else
                    {
                        <div class="m-3">
                            <span>@passwordAccount.Username</span>
                        </div>
                    }
                    <button @onclick="@(() => ToggleEdit(passwordAccount.Id, nameof(passwordAccount.Username)))" class="btn btn-secondary">
                        @(editingUsernameId == passwordAccount.Id ? "Save" : "Edit")
                    </button>
                </TemplateColumn>
                <TemplateColumn Context="passwordAccount" Title="Password" Class="align-middle">
                    @if (editingPasswordId == passwordAccount.Id && !hidePasswords)
                    {
                        <div class="m-3">
                            <input @bind="passwordAccount.Password" class="form-control" />
                        </div>
                    }
                    else
                    {
                        <div class="m-3">
                            <span>@passwordAccount.Password</span>
                        </div>
                    }
                    <button @onclick="@(() => ToggleEdit(passwordAccount.Id, nameof(passwordAccount.Password)))" class="btn btn-secondary">
                        @(editingPasswordId == passwordAccount.Id && !hidePasswords ? "Save" : "Edit")
                    </button>
                </TemplateColumn>
                <PropertyColumn Property="@(m => m.CreatedAt)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.CreatedAt))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.CreatedAt)
                        </button>
                        <TextInputFilter Value="@CreatedAtFilter" ValueChanged="@((value) => { CreatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Created At" />
                    </HeaderTemplate>
                </PropertyColumn>
                <PropertyColumn Property="@(m => m.LastUpdatedAt)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.LastUpdatedAt))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.LastUpdatedAt)
                        </button>
                        <TextInputFilter Value="@LastUpdatedAtFilter" ValueChanged="@((value) => { LastUpdatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by LastUpdatedAt" />
                    </HeaderTemplate>
                </PropertyColumn>
            }
            else
            {
                <PropertyColumn Property="@(m => m.Title)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.Title))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.Title)
                        </button>
                        <TextInputFilter Value="@TitleFilter" ValueChanged="@((value) => { TitleFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Title" />
                    </HeaderTemplate>
                </PropertyColumn>
                <PropertyColumn Property="@(m => m.Username)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.Username))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.Username)
                        </button>
                        <TextInputFilter Value="@UsernameFilter" ValueChanged="@((value) => { UsernameFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Username" />
                    </HeaderTemplate>
                </PropertyColumn>
                <PropertyColumn Property="@(m => m.Password)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.Password))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.Password)
                        </button>
                        <TextInputFilter Value="@PasswordFilter" ValueChanged="@((value) => { PasswordFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Password" />
                    </HeaderTemplate>
                </PropertyColumn>
                <PropertyColumn Property="@(m => m.CreatedAt)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.CreatedAt))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.CreatedAt)
                        </button>
                        <TextInputFilter Value="@CreatedAtFilter" ValueChanged="@((value) => { CreatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Created At" />
                    </HeaderTemplate>
                </PropertyColumn>
                <PropertyColumn Property="@(m => m.LastUpdatedAt)" Sortable="true">
                    <HeaderTemplate>
                        <button @onclick="@(() => SortData(PasswordColumns.LastUpdatedAt))" class="btn btn-primary">
                            Sort @GetSortIcon(PasswordColumns.LastUpdatedAt)
                        </button>
                        <TextInputFilter Value="@LastUpdatedAtFilter" ValueChanged="@((value) => { LastUpdatedAtFilter = value; FilterPasswords(); })" PlaceHolder="Filter by Detections" />
                    </HeaderTemplate>
                </PropertyColumn>
            }
        </QuickGrid>
    </div>
    <CustomPagination CurrentPage="@currentPage" TotalPages="@totalPages" OnPageChanged="@HandlePageChange" />


    <button class="btn btn-primary" @onclick="AddNewPasswords">Add New Password Accounts</button>
    @* TODO: be able add, remove, update password accounts 
    adding works. But need to test out update and integrate remove functionality
    *@
}
<NotificationModal @ref="notificationModal" />

<AddPasswordsModal @ref="addPasswordsModal" UserId="userId"/>
 
@code {
    private AddPasswordsModal addPasswordsModal {get; set;}
    private NotificationModal notificationModal {get; set;}
    private int? editingTitleId = null;
    private int? editingUsernameId = null;
    private int? editingPasswordId = null;
    private void ToggleEdit(int id, string field)
    {
        if (field == nameof(PasswordAccountDTO.Username))
        {
            editingUsernameId = (editingUsernameId == id) ? null : id;
            if (editingUsernameId is not null)
            {
                Console.WriteLine("editing");
            }
            else
            {
                // TODO: saving here so make api call to update
            }
        }
        else if (field == nameof(PasswordAccountDTO.Password))
        {
            if (hidePasswords)
            {
                notificationModal.Show(title: "Warning", message: "Please make sure you toggle passwords to show before editing.", type: ModalType.WARNING);
                return;
            }
            editingPasswordId = (editingPasswordId == id) ? null : id;
        }
        else if (field == nameof(PasswordAccountDTO.Title))
        {
            editingTitleId = (editingTitleId == id) ? null : id;
        }
    }
 
    private enum PasswordColumns
    {
        Title,
        Username,
        Password,
        CreatedAt,
        LastUpdatedAt,
    }
 
    private PasswordColumns passwordColumns;
 
    private IQueryable<PasswordAccountDTO> passwords {get; set;}
 
    private HttpClient httpClient { get;set; }
    private bool hidePasswords = true;
    private bool edit = false;

    private int userId {get;set;}

    private List<PasswordAccountDTO> passwordsToAdd = new();

    private async Task AddNewPasswords()
    {
        passwordsToAdd = await addPasswordsModal.ShowAsync();
        Console.WriteLine(JsonConvert.SerializeObject(passwordsToAdd));
        if (!passwordsToAdd.Any())
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync("api/PasswordManager/add-passwords", JsonConvert.SerializeObject(passwordsToAdd));

        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        
        if (!responseContent.Flag)
        {
            notificationModal.Show("Error", responseContent.Message, ModalType.ERROR);
        }
        else
        {
            notificationModal.Show("Success", responseContent.Message, ModalType.SUCCESS);
        }

        await Task.Delay(3000);
        // refresh the page after 3 seconds
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    
    private async Task ToggleEditing()
    {
        edit = !edit;
    }

    private async Task TogglePasswords()
    {
        hidePasswords = !hidePasswords;
        Console.WriteLine(hidePasswords);
        if (hidePasswords)
        {
            passwords = passwords.Select(p => new PasswordAccountDTO {
                Title = p.Title,
                Id = p.Id,
                UserId = p.UserId,
                Username = p.Username,
                Password = "*****",
                CreatedAt = p.CreatedAt,
                LastUpdatedAt = p.LastUpdatedAt,
            }).AsQueryable();
        }
        else
        {
            passwords = (await httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).AsQueryable();
        }
        UpdatePagedPasswords();
    }
   
    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
        passwords = (await httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).Select(p => new PasswordAccountDTO {
            Title = p.Title,
            Id = p.Id,
            UserId = p.UserId,
            Username = p.Username,
            Password = "*****",
            CreatedAt = p.CreatedAt,
            LastUpdatedAt = p.LastUpdatedAt,
        }).AsQueryable();
 
        UpdatePagedPasswords();

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        userId = Convert.ToInt32(user.Claims.First(c=>c.Type == ClaimTypes.NameIdentifier).Value);
    }
 
    private IQueryable<PasswordAccountDTO> pagedPasswords; // Paginated data
   
    // Filter properties
    private string TitleFilter {get;set;} = string.Empty;
    private string UsernameFilter {get;set;} = string.Empty;
    private string PasswordFilter {get;set;} = string.Empty;
    private string CreatedAtFilter {get;set;} = string.Empty;
    private string LastUpdatedAtFilter {get;set;} = string.Empty;
 
    private IQueryable<PasswordAccountDTO> filteredPasswords => passwords
        .Where(p => (
                string.IsNullOrWhiteSpace(TitleFilter) &&
                string.IsNullOrWhiteSpace(UsernameFilter) &&
                string.IsNullOrWhiteSpace(PasswordFilter) &&
                string.IsNullOrWhiteSpace(CreatedAtFilter) &&
                string.IsNullOrWhiteSpace(LastUpdatedAtFilter))
                || (!string.IsNullOrWhiteSpace(TitleFilter) && p.Title.ToString().Contains(TitleFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(UsernameFilter) && p.Username.Contains(UsernameFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(PasswordFilter) && p.Password.Contains(PasswordFilter, StringComparison.OrdinalIgnoreCase))
        || (!string.IsNullOrWhiteSpace(CreatedAtFilter) && p.CreatedAt.ToString() == CreatedAtFilter)
        || (!string.IsNullOrWhiteSpace(LastUpdatedAtFilter) && p.LastUpdatedAt.ToString() == LastUpdatedAtFilter)
            )
        .AsQueryable();
 
    private int currentPage = 1;
    private const int pageSize = 5; // Number of items per page
    private int totalPages => (int) Math.Ceiling((double) filteredPasswords.Count() / pageSize);
 
    private void FilterPasswords()
    {
        currentPage = 1;
        UpdatePagedPasswords();
    }
 
    // Handle page change event
    private void HandlePageChange(int newPage)
    {
        currentPage = newPage;
        UpdatePagedPasswords();
    }
 
    private PasswordColumns sortColumn; // The column currently being sorted
    private bool sortAscending = true; // Ascending or descending sort
 
    private void SortData(PasswordColumns columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending; // Toggle sort direction
        }
        else
        {
            sortColumn = columnName; // Set new column to sort
            sortAscending = true; // Default to ascending
        }
 
        UpdatePagedPasswords();
    }
 
    private void UpdatePagedPasswords()
    {
        pagedPasswords = filteredPasswords.Skip((currentPage - 1) * pageSize).Take(pageSize).AsQueryable();
 
        // Apply sorting
        pagedPasswords = sortAscending
            ? pagedPasswords.OrderBy(GetSortExpression())
            : pagedPasswords.OrderByDescending(GetSortExpression());
 
    }
 
    private Expression<Func<PasswordAccountDTO, object>> GetSortExpression()
    {
        // Return the appropriate expression based on the column being sorted
        return sortColumn switch
        {
            PasswordColumns.Title => p => p.Title,
            PasswordColumns.Username => p => p.Username,
            PasswordColumns.Password => p => p.Password,
            PasswordColumns.CreatedAt => p => p.CreatedAt,
            PasswordColumns.LastUpdatedAt => p => p.LastUpdatedAt,
            _ => p => p.Id // Default sort
        };
    }
 
    private string GetSortIcon(PasswordColumns columnName)
    {
        return sortColumn == columnName ? (sortAscending ? "↑" : "↓") : string.Empty; // Return an up or down arrow based on sorting
    }
}