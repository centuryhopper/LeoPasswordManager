@model IEnumerable<PasswordAccountModel>

@{
    ViewData["Title"] = "Home Page";

    string userId = ViewBag.userId;

    IEnumerable<PasswordAccountModel> pagedDetails = ViewBag.PagedDetails;

    var pager = ViewBag.Pager as Pager;

    var paginationParameters = new PaginationParameters
            {
                ControllerName = "Home",
                ActionName = "Index",
                pager = pager!
            };

    const string DB_PASSWORD_TABLE_ID = "password_table";
    const string HELPER_PASSWORD_FORM_ID = "helper_password_form";
    const string HELPER_PASSWORD_ADD_ROW_ID = "addRow";
    const string HELPER_PASSWORD_ADD_ROW_FIELD_ID = "addRowField";

    const string new_created_at = "new_created_at";
    const string new_last_updated_at = "new_last_updated_at";
    const string new_title = "new_title";
    const string new_username = "new_username";
    const string new_password = "new_password";

    const string edit_created_at = "edit_created_at";
    const string edit_last_updated_at = "edit_last_updated_at";
    const string edit_title = "edit_title";
    const string edit_username = "edit_username";
    const string edit_password = "edit_password";

    List<string> columnClasses = [
    //Constants.CREATED_AT,
    //Constants.LAST_UPDATED_AT,
    Constants.TITLE
    ,Constants.USERNAME
    ,Constants.PASSWORD
    ];
}

<style>
    .freeze_header {
        position: sticky;
        top: 0;
        background-color: #00A86B;
    }
</style>


@* @(await Html.RenderComponentAsync<TestGrid>(RenderMode.Server, new { UserId = ViewBag.userId })) *@


@await Component.InvokeAsync("PasswordTablePaginationVC", new { paginationParameters = paginationParameters })

<div class="m-3"><strong>Total number of records: @ViewBag.TotalRecordsCount</strong></div>

<table class="table-container table table-striped table-bordered table-hover" id="@DB_PASSWORD_TABLE_ID"
    style="width: 100%;">
    <thead class="freeze_header">
        <tr>
            <th></th>

            <th class="freeze_header" scope="col" style="@Constants.ROW_INDEX_COLUMN_STYLE">@Html.DisplayName("Row #")
            </th>

            <th class="freeze_header" scope="col" style="@Constants.ACTIONS_COLUMN_STYLE">@Html.DisplayName("Actions")
            </th>

            <th class="freeze_header" scope="col">@Html.DisplayName(Constants.CREATED_AT)</th>
            <th class="freeze_header" scope="col">@Html.DisplayName(Constants.LAST_UPDATED_AT)</th>
            <th class="freeze_header" scope="col">@Html.DisplayName(Constants.TITLE)</th>
            <th class="freeze_header" scope="col">@Html.DisplayName(Constants.USERNAME)</th>
            <th class="freeze_header" scope="col">@Html.DisplayName(Constants.PASSWORD)</th>

            <th class="freeze_header" scope="col" style="@Constants.UPDATE_COLUMN_STYLE">@Html.DisplayName("Update")
            </th>

            <th class="freeze_header" scope="col" style="@Constants.DELETE_COLUMN_STYLE">@Html.DisplayName("Delete")
            </th>

        </tr>

    </thead>

    <tbody>
        @foreach (var (passwordDetail, i) in pagedDetails.Select((passwordDetail, i) => (passwordDetail, i)))
        {
            <tr>
                <td>
                </td>
                <td>
                    <span>@(i + 1)</span>
                </td>
                <td>
                    <a class="Edit" href="javascript:;">EDIT</a>
                    <a class="Cancel" href="javascript:;" style="display:none">CANCEL</a>
                </td>

                @* children of these named columns must be in the order of span, then input element, then any other helpers
            come after. Otherwise the jquery code will not work because I expect the first child to always be a span and
            second child to be the input or dropdown *@

                <td class="@Constants.CREATED_AT">
                    <span id="@(edit_created_at+i)">@passwordDetail.CreatedAt</span>
                    <div style="width:150px;">
                        <p style="display:none;">This is used to increase width of column</p>
                    </div>
                </td>
                <td class="@Constants.LAST_UPDATED_AT">
                    <span id="@(edit_last_updated_at+i)">@passwordDetail.LastUpdatedAt</span>
                    <div style="width:150px;">
                        <p style="display:none;">This is used to increase width of column</p>
                    </div>
                </td>
                <td class="@Constants.TITLE">
                    <span>@passwordDetail.Title</span>
                    <input id="@(edit_title+i)" style="display: none;" placeholder="Enter Title">
                    <div style="width:150px;">
                        <p style="display:none;">This is used to increase width of column</p>
                    </div>
                </td>
                <td class="@Constants.USERNAME">
                    <span>@passwordDetail.Username</span>
                    <input id="@(edit_username+i)" style="display: none;" placeholder="Enter UserName">
                    <div style="width:150px;">
                        <p style="display:none;">This is used to increase width of column</p>
                    </div>
                </td>
                <td class="@Constants.PASSWORD">
                    <span>@passwordDetail.Password</span>
                    <input id="@(edit_password+i)" style="display: none;" placeholder="Enter Password">
                    <div style="width:150px;">
                        <p style="display:none;">This is used to increase width of column</p>
                    </div>
                </td>
                <td>
                    <a class="Update" style="pointer-events: none; color: gray; text-decoration: none;">UPDATE</a>
                </td>
                <td style="@Constants.DELETE_COLUMN_STYLE">
                    <a class="Delete" href="javascript:;">DELETE</a>
                    <a class="ConfirmDelete" href="javascript:;" style="display:none">CONFIRM</a>
                    <a class="CancelDelete" href="javascript:;" style="display:none">CANCEL</a>
                </td>
                <td style="display:none;">
                    @passwordDetail.Id
                </td>
            </tr>
        }
    </tbody>

</table>

@await Component.InvokeAsync("PasswordTablePaginationVC", new { paginationParameters = paginationParameters })

<div class="row">
    <div class="col-1"></div>
    <div class="col">
        @* interactable grid for adding new coral data *@
        @await Component.InvokeAsync("HelperPasswordFormVC", new
            {
                formId = HELPER_PASSWORD_FORM_ID,
                addRowId = HELPER_PASSWORD_ADD_ROW_ID,
                addRowFieldId = HELPER_PASSWORD_ADD_ROW_FIELD_ID
            })
    </div>
    <div class="col-1"></div>
</div>

@* TODO: razor component of uploading and exporting the passwords can be added right here *@


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>

        function validateInput(el, checkLst)
        {
            let input = el.val().trim()
            if (checkLst.find(e => e === input))
            {
                el.removeClass('alert alert-danger')
            }
            else
            {
                el.addClass('alert alert-danger')
            }
        }

        function generateUUID()
        {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c)
            {
                const r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function getTodayInYearMonthDayFormat()
        {
            const now = new Date();
            // Extract year, month, and day
            const year = now.getFullYear();
            const month = (now.getMonth() + 1).toString().padStart(2, '0'); // Months are 0-based, so add 1
            const day = now.getDate().toString().padStart(2, '0');

            const formattedDate = `${year}-${month}-${day}`;

            return formattedDate
        }

        $(function ()
        {
            const gridColumnsSet = new Set(@Html.Raw(Json.Serialize(columnClasses)))

            const dbGridRowsCount = Number('@pagedDetails.Count()')

            // all js code above is for initializing


            // helper grid form
            $('#@HELPER_PASSWORD_FORM_ID').submit(function (event)
            {

                event.preventDefault();

                let passwordDataLst = []


                $(this).find('table tbody tr').each(function (rowIdx)
                {

                    let rowElem = $(this)

                    // console.log(rowElem.find(`td:nth(${CoralColumnIndices.species})`).children().first().val());

                    let passwordDetail = {
                        CreatedAt: '',
                        LastUpdatedAt: '',
                        Title: '',
                        Username: '',
                        Password: '',
                        Id: generateUUID(),
                        UserId: '@userId',

                    }

                    // examine every cell per row
                    $(this).find("td").each(function ()
                    {
                        let span = $(this).find("span")
                        let input = $(this).find("input")
                        if (span.length > 0)
                        {
                            switch (span.attr('class'))
                            {
                                case '@Constants.CREATED_AT':
                                    passwordDetail.CreatedAt = span.text()
                                    break;
                                case '@Constants.LAST_UPDATED_AT':
                                    passwordDetail.LastUpdatedAt = span.text()
                                    break;
                            }
                        }
                        if (input.length > 0)
                        {
                            switch (input.attr('class'))
                            {
                                case '@Constants.TITLE':
                                    passwordDetail.Title = input.val() || ''
                                    break;
                                case '@Constants.USERNAME':
                                    passwordDetail.Username = input.val() || ''
                                    break;
                                case '@Constants.PASSWORD':
                                    passwordDetail.Password = input.val() || ''
                                    break;
                            }
                        }
                    });

                    passwordDataLst.push(passwordDetail);
                });

                // console.log('passwordDataLst: ' + JSON.stringify(passwordDataLst));

                $.ajax({
                    type: 'POST',
                    url: '@(Url.Action("AddPasswordRows", "Home"))',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        PasswordAccountModels: passwordDataLst
                    }),
                    success: function (result)
                    {
                        // refresh page and clear helper table
                        swal("password details added!", "", "success")
                            .then((value) =>
                            {
                                //swal(`The returned value is: ${value}`);
                                location.reload()
                            });
                    },
                    error: function (error)
                    {
                        console.log(error);
                    }
                });

            });

            $('#@HELPER_PASSWORD_ADD_ROW_FIELD_ID').on('change', function ()
            {
                let rowNum = Number($(this).val())
                if (rowNum > 0)
                {
                    $('#@HELPER_PASSWORD_FORM_ID').show()
                }
                else
                {
                    $('#@HELPER_PASSWORD_FORM_ID').hide()
                }
            });

            $('#@HELPER_PASSWORD_ADD_ROW_ID').click(function ()
            {

                if (!$('#@HELPER_PASSWORD_ADD_ROW_FIELD_ID').val())
                {
                    //alert('Please enter the number of rows you want to add')
                    swal("Please enter the number of rows you want to add", "", "info")
                    return
                }

                let numRows = Number($('#@HELPER_PASSWORD_ADD_ROW_FIELD_ID').val())

                // console.log(numRows);

                const addRowLimit = 50

                if (numRows > addRowLimit)
                {
                    swal(`you cannot enter more than ${addRowLimit} rows`, "", "error")
                    return
                }

                $('#@HELPER_PASSWORD_ADD_ROW_FIELD_ID').val('')

                let numCoralsAlreadyInDb = dbGridRowsCount

                let existingRowCount = $('#@HELPER_PASSWORD_FORM_ID').find('table tbody tr').length

                for (let i = existingRowCount; i < existingRowCount + numRows; i++)
                {
                    let maxRowNum = 0

                    $('span.rowNumber').each(function ()
                    {
                        maxRowNum = Math.max(Number($(this).text()), maxRowNum)
                    })

                    maxRowNum = (i === 0) ? maxRowNum + numCoralsAlreadyInDb + 1 : maxRowNum + 1

                    // no need to generate coral id here because we do so when the user hits "Save Coral Entries"

                    const formattedDate = getTodayInYearMonthDayFormat()

                    var newRow = `
                            <tr>
                                <td>
                                    <span class="rowNumber">${maxRowNum}</span>
                                </td>
                                <td>
                                    <span style="width:50px" type="text" class="@Constants.CREATED_AT">${formattedDate}</span>
                                </td>
                                <td>
                                    <span style="width:50px" type="text"  class="@Constants.LAST_UPDATED_AT">${formattedDate}</span>
                                </td>
                                <td>
                                    <input style="width:50px" type="text" class="@Constants.TITLE">
                                </td>
                                <td>
                                    <input style="width:50px" type="text" class="@Constants.USERNAME">
                                </td>
                                <td>
                                    <input style="width:50px" type="text" class="@Constants.PASSWORD">
                                </td>
                                <td>
                                    <button style="width:75px" class="deleteButton btn btn-danger">Delete</button></td>
                                </td>
                            </tr>`;

                    $('#@HELPER_PASSWORD_FORM_ID').find('table tbody').append(newRow);

                    $('.deleteButton').on('click', function ()
                    {

                        // Find the closest 'tr' ancestor and remove it

                        $(this).closest('tr').remove();

                    });

                }

            });



            $("body").on("click", '#@DB_PASSWORD_TABLE_ID .Edit', function ()
            {

                let row = $(this).closest("tr")

                // get idx value from second column

                let rowIdx = Number(row.children('td').eq(1).find('span').text().trim())

                let thName = ''


                row.find("td").each(function (columnIdx)
                {
                    thName = $('#@DB_PASSWORD_TABLE_ID').find('th').eq(columnIdx).text().trim();

                    if (gridColumnsSet.has($(this).attr('class')))
                    {
                        // NOTE: span must be the first child of the td columns for this to work
                        let span = $(this).children().first()

                        switch (thName)
                        {
                            default:
                                // input boxes
                                if ($(this).find("input").length > 0)
                                {
                                    $(this).find('input').show()

                                    $(this).find('input').val(span.text().trim())

                                    span.hide()
                                }
                        }

                    }
                });

                // reorganize action buttons
                row.find('.Update').removeAttr('style')

                row.find('.Update').attr('href', 'javascript:;')

                row.find('.Cancel').show()

                //row.find('.Delete').hide()

                $(this).hide()

            });

            $("body").on("click", '#@DB_PASSWORD_TABLE_ID .CancelDelete', function ()
            {
                let row = $(this).closest("tr")
                row.find('.Delete').show()
                row.find('.ConfirmDelete').hide()
                $(this).hide()
            });

            $("body").on("click", '#@DB_PASSWORD_TABLE_ID .Cancel', function ()
            {

                let row = $(this).closest("tr")

                // get idx value from second column
                let rowIdx = Number(row.children('td').eq(1).find('span').text().trim())

                row.find("td").each(function ()
                {
                    if ($(this).find("input").length > 0)
                    {
                        $(this).find('input').hide()
                        $(this).find('span').show()
                    }
                });

                // reorganize action buttons
                row.find('.Update').attr('style', 'pointer-events: none; color: gray; text-decoration: none;');
                row.find('.Update').removeAttr('href')
                row.find('.Edit').show()
                //row.find('.Delete').show()
                //row.find('.ConfirmDelete').hide()
                $(this).hide()

            });



            $("body").on("click", '#@DB_PASSWORD_TABLE_ID .Update', function ()
            {
                let row = $(this).closest("tr")

                // get idx value from second column
                let rowIdx = Number(row.children('td').eq(1).find('span').text().trim())

                const formattedDate = getTodayInYearMonthDayFormat()

                var passwordAccountModel = {
                    CreatedAt: $('#@edit_created_at' + rowIdx-1).text(),
                    LastUpdatedAt: formattedDate,
                    Title: $('#@edit_title' + (rowIdx-1)).val(),
                    Username: $('#@edit_username' + (rowIdx-1)).val(),
                    Password: $('#@edit_password' + (rowIdx-1)).val(),
                    UserId: '@userId',
                    Id: row.find("td:last-child").text().trim()
                }

                // visual update
                row.find("td").each(function (idx)
                {
                    if (gridColumnsSet.has($(this).attr('class')))
                    {
                        let span = $(this).children().first()
                        span.show()
                        if (span.next().is('input'))
                        {
                            let input = span.next()
                            //console.log(input.val());
                            span.html(input.val())
                            span.next().hide()
                        }
                    }

                });


                // reorganize action buttons for update
                row.find('.Edit').show()
                row.find('.Delete').show()
                row.find('.Cancel').hide()

                // disable update button
                $(this).attr('style', 'pointer-events: none; color: gray; text-decoration: none;')
                $(this).removeAttr('href')

                //console.log(JSON.stringify(passwordAccountModel))

                // server update
                $.ajax({
                    url: "@Url.Action("UpdatePasswordDetail", "Home")",
                    type: 'POST',
                    data: passwordAccountModel,
                    datatype: "json",
                    success: function (res)
                    {
                        //console.log(res);
                        swal("Successfully updated the password detail!", "", "success")
                            .then((value) =>
                            {
                                //swal(`The returned value is: ${value}`);
                                //location.reload()
                            });
                   },
                   error: function (req, status, error)
                    {
                        swal("Failed to update the coral detail :/", "", "error")
                            .then((value) =>
                            {
                                //swal(`The returned value is: ${value}`);
                                //location.reload()
                            });
                        console.log(req);
                        console.log(status);
                        console.log(error);
                    }
               });
            })
        });


        $("body").on("click", '#@DB_PASSWORD_TABLE_ID .Delete', function ()
        {
            let row = $(this).closest("tr")

            // reorganize action buttons
            // row.find('.Update').css('color', '#ccc').prop('disabled', true);
            row.find('.CancelDelete').show()
            row.find('.ConfirmDelete').show()
            //row.find('.Edit').hide()
            $(this).hide()
        });


        $("body").on("click", '#@DB_PASSWORD_TABLE_ID .ConfirmDelete', function ()
        {
            let row = $(this).closest("tr")

            // get the hidden row
            let passwordDetailId = row.find("td:last").text().trim()

            // make ajax call to delete that row in the server so we can re-render the page

            $.ajax({
                url: "@Url.Action("DeletepasswordDetail", "Home")",
                type: 'POST',
                data: {
                    passwordDetailId
                },
                datatype: "json",
                success: function (res)
                {
                    //console.log(res);
                    location.reload()
                },
                error: function (req, status, error)
                {
                    console.log(req);
                    console.log(status);
                    console.log(error);
                }
            })
        });
    </script>
}